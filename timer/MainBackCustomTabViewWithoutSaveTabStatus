
//
//  ContentView.swift
//  timer
//
//  Created by linhai on 2021/5/17.
//

import SwiftUI
import SwiftUIX



struct MainView: View {
    
    
    //    @State var minuteInit: String = "45"
    //    @StateObject var timer: TimerData
    @EnvironmentObject var timer: TimerData
    //    @State var timeMin: Minute = Minute()
    @EnvironmentObject var timerTasks: CTimerTask
    //    @State var play: String
    @State var buttt: String = "play.fill"
    @State var buttt1: String = "play.fill"
    @State var isPresented = false
    @State private var selectedTab = 0
    @StateObject var viewRouter = ViewRouter()
    var ag: AGAudioRecorder = AGAudioRecorder(withFileName: "re")
    
    @State var searchContent = "花海"
    @State var isEditing = false
    @StateObject var player : PlayerViewModel
    @StateObject var musicItemConroller: MusicItemPlayerController
    
    @State var showPlsyDetail = false
    @StateObject var scrollViewOffsetValue = ScrollOffsetModel()
    
    var body: some View {
        
        GeometryReader { geometry in
            ZStack {
                //                Spacer()
                switch viewRouter.currentPage {
                case .music:
                    //
                    NavigationView(content: {
//                        VStack(alignment: .center, spacing: nil, content: {
                            //ScrollView(/*@START_MENU_TOKEN@*/.vertical/*@END_MENU_TOKEN@*/, showsIndicators: false, content: {
                            ScrollView{
                                
    //                            Text("")
                                NavigationLink(
                                    destination: Text("LargePageView"),
                                    label: {
                                        LargePageView(musicItem: musicItemConroller)
                                            .frame(width:  380, height: 160)
//                                            .aspectRatio(2 / 2, contentMode: .fill)
//                                            .listRowInsets(EdgeInsets())
                                    })
                                
                                //                                        .aspectRatio(1, contentMode: .fit)
                                //                            .listRowInsets(EdgeInsets())
                                SearchBar("search01", text: $searchContent, isEditing: $isEditing) {
                                    print("search")
                                }
                                .frame(height: 40 )
                                .padding([.leading, .trailing, .bottom], 10)
//                                ZStack {
//                                    RoundedRectangle(cornerRadius: 10, style: /*@START_MENU_TOKEN@*/.continuous/*@END_MENU_TOKEN@*/)
//                                        .stroke(/*@START_MENU_TOKEN@*/Color.blue/*@END_MENU_TOKEN@*/, style: StrokeStyle())
//                                        .foregroundColor(.white)
//                                    HStack(alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/, spacing: nil, content: {
//                                        Image(systemName: "magnifyingglass")
//                                            .padding([.leading], 20)
//                                        TextField("花海", text: $searchContent)
//                                    })
//                                }
                                
                                musicCatelog
                                Text("")
                                    .foregroundColor(.clear)
                                    .font(.largeTitle)
                            }.listStyle(InsetListStyle())
                            .navigationTitle("资料库")
                        
                            
//                            .hiddenNavigationBarStyle()
//                            .navigationBarHidden(true)
//                            .navigationBarTitle(Text("Home"))
//                            .edgesIgnoringSafeArea([.top, .bottom])
//                        })
//                        .ignoresSafeArea( edges: .all)
                        
                        
                    })
                    .ignoresSafeArea( edges: .all)
                    
                    
                case .record:
                    Text("Records")
                case .timer:
                    TimerCollectionView(timer: _timer, timerTasks: _timerTasks)
                //                    Text("Liked")
                case .account:
                    Text("account")
                    
                    Spacer()
                    
                }
                VStack(spacing: 0) {
                    Spacer()
                    ZStack {
//                        BlurView(style: .dark)
//                        BlurEffectView(style: .dark)
                        VisualEffectBlurView(blurStyle: .dark)
                            .frame(width: geometry.size.width, height: geometry.size.height/(viewRouter.currentPage == .music ? 6 : 10) )
//                            .edgesIgnoringSafeArea(/*@START_MENU_TOKEN@*/.all/*@END_MENU_TOKEN@*/)
                        VStack(alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/, spacing: nil, content: {
                            // foot music
                            if viewRouter.currentPage == .music {
                            MusicPlayFootView(musicItemConroller: musicItemConroller, player: player)
                                .contentShape(Rectangle())
                                .onTapGesture {
                                    self.showPlsyDetail = true
                                    //                                    print("all tap")
                                }
                                .fullScreenCover(isPresented: $showPlsyDetail, onDismiss: nil) {
                                    VoicePlayerDetailView(player: player)
                                }
                            }
//                            Rectangle()
//                                .frame(width: 414, height: 0.1)
                            
//                            Path { path in
//                                path.move(to: CGPoint(x: 0, y: 700))
//                                path.addLine(to: CGPoint(x: 414, y: 700))
//                            }
//                            .stroke(lineWidth: 0.3)
                            
                            //                            tabview
                            HStack{
                                Spacer()
                                HomeTabBarIcon(viewRouter: viewRouter, assignedPage: .music, width: geometry.size.width/5, height: geometry.size.height/28, systemIconName: "music.note", tabName: "music")
                                
                                HomeTabBarIcon(viewRouter: viewRouter, assignedPage: .record, width: geometry.size.width/5, height: geometry.size.height/28, systemIconName: "waveform", tabName: "Records")
                                HomeTabBarIcon(viewRouter: viewRouter, assignedPage: .timer, width: geometry.size.width/5, height: geometry.size.height/28, systemIconName: "timer", tabName: "timer")
                                HomeTabBarIcon(viewRouter: viewRouter, assignedPage: .account, width: geometry.size.width/5, height: geometry.size.height/28, systemIconName: "person.fill.viewfinder", tabName: "account")
                                Spacer()
                                
                            }
                            .foregroundColor(.gray)
                            
                        })
                    }

                }
            }
        }
    }
    
    
    
    var modalView: some View {
        Text("The Modal View")
            .font(.system(size: 48))
            .bold()
    }
    
    var musicCatelog: some View {
        
            VStack(alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/, spacing: 4, content: {
                // 歌曲列表
                NavigationLink(destination:
                                SongListView(musicItemController: musicItemConroller, player: player, scrollViewOffsetValue: scrollViewOffsetValue)
                ) {
                    HStack(alignment: .center, spacing: /*@START_MENU_TOKEN@*/nil/*@END_MENU_TOKEN@*/, content: {
                        Image(systemName: "music.note")
                            .frame(width: 40, height: 30, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/)
                        Text("歌曲")
                        Spacer()
                    })
                    .animation(.none)
                    .font(.title3)
                    .foregroundColor(.red)
                }
                .padding(0.5)
                //                                            .hiddenNavigationBarStyle()
                Path { path in
                    path.move(to: CGPoint(x: 0, y: 0))
                    path.addLine(to: CGPoint(x: 380, y: 0))
                }
                .stroke(lineWidth: 0.3)
                .opacity(0.5)
                // 播放列表
//                ForEach(0..<20) { i in
//                    NavigationLink("ffsfds\(i)", destination: Text("fff\(i)"))
//                }
                
                NavigationLink(destination:
                                SongListView(musicItemController: musicItemConroller, player: player, scrollViewOffsetValue: scrollViewOffsetValue)
                ) {
                    HStack(alignment: .center, spacing: /*@START_MENU_TOKEN@*/nil/*@END_MENU_TOKEN@*/, content: {
                        Image(systemName: "music.note.list")
                            .frame(width: 40, height: 30, alignment: /*@START_MENU_TOKEN@*/.center/*@END_MENU_TOKEN@*/)
                        Text("播放列表")
                        Spacer()
                    })
                    .animation(.none)
                    .font(.title3)
                    .foregroundColor(.red)
                }
                .labelsHidden()
                Path { path in
                    path.move(to: CGPoint(x: 0, y: 0))
                    path.addLine(to: CGPoint(x: 380, y: 0))
                }
                .stroke(lineWidth: 0.3)
                .opacity(0.5)
                
                
            })
            .padding([.leading], 20)
            .animation(.none)
            .listRowInsets(EdgeInsets())
            
//        })
//        .hiddenNavigationBarStyle()
//                                    .navigationBarTitle("")
//                                    .navigationBarHidden(true)
    }
}



struct VisualEffectView: UIViewRepresentable {
    var effect: UIVisualEffect?
    func makeUIView(context: UIViewRepresentableContext<Self>) -> UIVisualEffectView { UIVisualEffectView() }
    func updateUIView(_ uiView: UIVisualEffectView, context: UIViewRepresentableContext<Self>) { uiView.effect = effect }
}

struct Blur: UIViewRepresentable {
    let style: UIBlurEffect.Style = .systemUltraThinMaterial
    
    func makeUIView(context: Context) -> UIVisualEffectView {
        return UIVisualEffectView(effect: UIBlurEffect(style: style))
    }
    
    func updateUIView(_ uiView: UIVisualEffectView, context: Context) {
        uiView.effect = UIBlurEffect(style: style)
    }
}



struct BlurView: UIViewRepresentable {
    
    let style: UIBlurEffect.Style
    
    func makeUIView(context: UIViewRepresentableContext<BlurView>) -> UIView {
        let view = UIView(frame: .zero)
        view.backgroundColor = .clear
        let blurEffect = UIBlurEffect(style: style)
        let blurView = UIVisualEffectView(effect: blurEffect)
        blurView.translatesAutoresizingMaskIntoConstraints = false
        view.insertSubview(blurView, at: 0)
        NSLayoutConstraint.activate([
            blurView.heightAnchor.constraint(equalTo: view.heightAnchor),
            blurView.widthAnchor.constraint(equalTo: view.widthAnchor),
        ])
        
        return view
    }
    
    func updateUIView(_ uiView: UIView,
                      context: UIViewRepresentableContext<BlurView>) {
        
    }
    
}


struct HiddenNavigationBar: ViewModifier {
    func body(content: Content) -> some View {
        content
            .navigationBarTitle("", displayMode: .inline)
            .navigationBarHidden(true)
    }
}

extension View {
    func hiddenNavigationBarStyle() -> some View {
        modifier( HiddenNavigationBar() )
    }
}



enum Page {
    case music
    case record
    case timer
    case account
}

class ViewRouter: ObservableObject {
    @Published var currentPage: Page  = .music
}



struct HomeTabBarIcon: View {
    @StateObject var viewRouter: ViewRouter
    let assignedPage: Page
    let width, height: CGFloat
    let systemIconName, tabName: String
    var body: some View {
        VStack {
            Image(systemName: systemIconName)
                .resizable()
                .aspectRatio(contentMode: .fit)
                .frame(width: width, height: height)
                .padding(.top, 10)
            Text(tabName)
                .font(.footnote)
            //            Spacer()
        }
        .padding(.horizontal, -4) // ?
        .contentShape(Rectangle())
        .onTapGesture {
            viewRouter.currentPage = assignedPage
        }
        .foregroundColor(viewRouter.currentPage == assignedPage ? .red : .gray)
    }
}




struct ContentView_Previews: PreviewProvider {
    static let tc = CTimerTask()
    static let t = TimerData(15, 0, 0, tc)
    static let musicController = MusicItemPlayerController()
    static let player = PlayerViewModel(musicController)
    static var previews: some View {
        //        ContentView(timer: t).environmentObject(t)
        MainView(player: player, musicItemConroller: musicController).environmentObject(t).environmentObject(tc)
    }
}


